import lists

(*
    Log = {
        snapshot: Snapshot
        log: Entry[],
        lastApplied: int,
        internalChanges: int,
        commitIndex: int,
        latestSerials: SerialKey[]
    }
    Snapshot = {
        snapshot: Some state
        lastIncludedIndex: int,
        lastIncludedTerm: int
    }
    Entry = {
        term: int,
        command: message,
        serial: string
    }
    SerialKey = {
        id: clusterId[] | pid,
        key: (logIndex, number) | nonce
    }
*)

(*
    LeaderInfo = {
        nextIndex = {
            peer: p,
            next: int
        }[],
        matchIndex = {
            peer: p,
            match: int
        }[]
    }
*)

(*
    StateMachine = {
        set_hook : fn (x: string) => x
        get_hook : fn (x: string, callback_pid: string) => x
        get_snapshot_hook : fn(callback_pid: string) => x
        get_changes_hook : fn (callback_pid: string) => x
        snapshot_condition_hook : fn (log_summary: LogSummary, callback_pid: string) => x: bool
    }
    LogSummary = {
        log_size: int,
        entries_since_snap: int
    }
*)

(*
    Node = {
        all_nodes: string[],
        id: string,
        log: Log,
        term: int,
        voted_for: string,
        leader: string,
        leader_info: LeaderInfo,
        snapshot_condition: fn logSummary => ... : boolean
        state_machine: ([SIDE-EFFECTS], STATUS, STEP-FUNC)
        total_nodes: int,
        verbose: boolean
    }
*)

(*
    RaftProcesses = {
        type: Client | Cluster,
        id: pid | Clusterid[]
    }
*)

let 
    (* Constants *)
    val WAIT = "WAIT"
    val SUS = "SUS"
    val DONE = "DONE"
    val SEND_HEARTBEAT = "SEND_HEARTBEAT"
    val RAFT_UPDATE = "RAFT_UPDATE"
    val NOT_LEADER = "NOT_LEADER"
    val ACKNOWLEDGE = "ACKNOWLEDGE"
    val REJECT = "REJECT"
    val ELECTION_TIMEOUT = "ELECTION_TIMEOUT"
    val REQUEST_VOTE = "REQUEST_VOTE"
    val YES_VOTE = "YES_VOTE"
    val NO_VOTE = "NO_VOTE"
    val VOTE_TIMEOUT = "VOTE_TIMEOUT"
    val APPEND_ENTRIES = "APPEND_ENTRIES"
    val SNAPSHOT = "SNAPSHOT"
    val ADD_NODES = "ADD_NODES"
    val DIAL = "DIAL"
    val DIALER_ACK = "DIALER_ACK"
    val DIALER_SM_BUSY = "DIALER_SM_BUSY"
    val DIALER_SM_DONE = "DIALER_SM_DONE"
    val DIALER_CLIENT_MSG = "DIALER_CLIENT_MSG"
    val DIALER_MESSAGE_TIMEOUT = "DIALER_MESSAGE_TIMEOUT"
    val DIALER_BUSY_TIMEOUT = "DIALER_BUSY_TIMEOUT"
    val SEND_TO_NTH = "SEND_TO_NTH"
    val SEND_TO_ALL = "SEND_TO_ALL"
    val DEBUG_PRINTLOG = "DEBUG_PRINTLOG"
    val DEBUG_PAUSE = "DEBUG_PAUSE"
    val DEBUG_CONTINUE = "DEBUG_CONTINUE"
    val DEBUG_APPLYSNAPSHOT = "DEBUG_APPLYSNAPSHOT"
    val DEBUG_SNAPSHOT_COND = "DEBUG_SNAPSHOT_COND"
    val DEBUG_TIMEOUT = "DEBUG_TIMEOUT"
    val FUNCTION_DONE = "FUNCTION_DONE"
    val ERROR_TIMEOUT = "ERROR_TIMEOUT"
    val CLUSTER = "CLUSTER"
    val CLIENT = "CLIENT"

    val LOCAL_ERROR_TIMEOUT = 4000
    val ELECTION_TIMEOUT_LOWER = 2000
    val ELECTION_TIMEOUT_UPPER = 4000
    val HEARTBEAT_INTERVAL = 500

    val DIALER_NOLEADER_TIMEOUT = 500
    val DIALER_NOMSG_TIMEOUT = 2000
    val DIALER_SM_BUSY_TIMEOUT = 1000

    fun not a = a = false
    fun send_to_all processes msg sender = map (fn x => send(x, msg)) (filter (fn x => x <> sender) processes)

    fun send_to_nth processes msg n = send((nth (reverse processes) n), msg)

    fun max a b = if a < b then b else a 

    fun min a b = if a > b then b else a

    (* #IMPORT libs/quickselect.trp *)

    (* #IMPORT libs/log.trp *)

    (* #IMPORT libs/leader-info.trp *)

    (* Executes a function after a given timeout. *)
    fun start_timeout func duration = 
        let fun timeout () = 
            let val time = duration
                val _ = sleep time
            in func ()
            end
            val p_id = self()
        in spawn timeout
    end

    (* Send message after a delay. *)
    fun send_delay (to, m) delay =
        sleep delay;
        send (to, m)

    (* Starts a random timeout with lower=2sec and upper=4sec *)
    fun start_random_timeout func = start_timeout func (ELECTION_TIMEOUT_LOWER + ((random ()) * (ELECTION_TIMEOUT_UPPER - ELECTION_TIMEOUT_LOWER)))

    (* #IMPORT ./libs/dialer.trp *)

    (* Send the side-effect-messages to dialers or clusters *)
    fun send_sides log sides =
        (* Add message to key-value-store, sorting by the recipients. *)
        let fun add_msg id msg sk dict = case dict of
            [] => [(id, [(msg, sk)])]
            | (other_id, msgs) :: t =>
                if id = other_id then
                    (id, (msg, sk) :: t)
                else (other_id, msgs) :: add_msg id msg sk t
            (* Generate key-value-store of all message, sorting by recipients. *)
            val (sorted_msgs, _) = case sides of
            [] => ([], 0)
            | x => foldl (fn ((callback, msg), (acc, seq)) =>
                (add_msg callback msg ({ id = callback, key = (log.lastApplied, seq)}) acc, seq + 1)
            ) ([], 1) x
        (* Sends all messages. *)
        in map (fn x => raft_send x) sorted_msgs
    end

    (* Applies all log-entries that have been committed, but not applied *)
    fun apply_log log state_machine is_leader = 
        (* If any non-applied, committed logs apply... *)
        if log.lastApplied < log.commitIndex then
            (* Get the latest non-applied committed entry *)
            let val entry = get_nth_command log (log.lastApplied + 1) 
                val command = entry.command
                (* Update log to apply entry and apply entry on state-machine*)
                val log = update_applied log
                val (sides, status, step) = state_machine
                val (new_sides, new_status, new_step) = step command
            (* If leader is applying, execute side-effects. *)
            in (if is_leader then
                    entry.callback ();
                    send_sides log new_sides
                else ());
            apply_log log (new_sides, new_status, new_step) is_leader end
        else (log, state_machine)

    (* #IMPORT ./libs/nodes/leader.trp *)
    (* #IMPORT ./libs/nodes/candidate.trp *)
    (* #IMPORT ./libs/nodes/follower.trp *)

    (* A node is dormant until it has received the references of all other <nodes. *)
    fun dormant_node node =
        if length(node.all_nodes) < node.node_amount then
            receive [
                (* Adds a node to the cluster, only used for initialization *)
                hn ("ADD_NODES", x) => 
                    dormant_node ({node with all_nodes = append node.all_nodes x})
            ]
        else follower node
    
    (* Defines a default node, being a follower in term 1 without a leader and
    the state-machine in its beginning state *)
    fun default_node id all_nodes node_amount state_machine snapshot_cond = 
        let val node = {
            all_nodes = all_nodes,
            id = id,
            log = empty_log,
            term = 1,
            voted_for = (),
            leader = (),
            leader_info = (),
            state_machine = case state_machine of
                (_, _, _) => state_machine
                | _ => ([], WAIT, fn x => x ()),
            snapshot_cond = snapshot_cond,
            node_amount = node_amount,
            serialkeys = []
        }
        in dormant_node node
    end

    (* Spawn a state-machine on a seperate thread, creates a record*)
    fun initiate_node state_machine snapshot_cond node_amount id = 
        spawn (fn () => default_node id [] node_amount state_machine snapshot_cond)

    (* Sends a list of all nodes to all nodes *)
    fun add_refs nodes = 
        map (fn x => send(x, (ADD_NODES, nodes))) nodes
    
    (* Spawn n nodes*)
    fun initiate_nodes n state_machine snapshot_cond =
        let val part_init = initiate_node state_machine snapshot_cond n
            fun spawn_nodes n acc_id =
                case n of
                0 => []
                | x => append 
                    (spawn_nodes (x - 1) (acc_id ^ "I")) 
                    [(part_init acc_id)]

            val nodes = spawn_nodes n "I"
        in 
            add_refs nodes;
            nodes
    end

    (* Spawn a state-machine on some alias *)
    fun initiate_distributed_node state_machine snapshot_cond node_amount id alias = 
        spawn(alias, fn () => (default_node id [] node_amount state_machine snapshot_cond))

    fun initiate_distributed_nodes aliases state_machine snapshot_cond =
        let val part_init = initiate_distributed_node state_machine snapshot_cond (length(aliases))
            fun spawn_nodes acc acc_id =
                case acc of 
                [] => []
                | h :: t =>
                    append (spawn_nodes t (acc_id ^ "I")) [part_init acc_id h]
            val nodes = spawn_nodes aliases "I"
        in 
            add_refs nodes;
            nodes
    end

    (* Spawns a dialer, dialing into a cluster. *)
    fun raft_dial (cluster, client_id) =
        spawn(fn () => dialer cluster client_id)

    (* Spawns a distributed Raft network, which can be dialed into to
    communicate with their state-machines *)
    fun raft_spawn_alias (state_machine, aliases, snapshot_cond) = 
        initiate_distributed_nodes aliases state_machine snapshot_cond
    | raft_spawn_alias (state_machine, aliases) = 
        raft_spawn_alias (state_machine, aliases, 50)

    (* Spawns a Raft network, which can be contacted to
    communicate with their state-machines *)
    fun raft_spawn (state_machine, n, snapshot_cond) =
        initiate_nodes n state_machine snapshot_cond
    | raft_spawn (state_machine, n) = raft_spawn (state_machine, n, 50)

    (*fun raft_d (state_machine, client_id, aliases, snapshot_cond, verbose) =
        let val nodes = raft_spawn_alias (state_machine, aliases, snapshot_cond, verbose)
        in (raft_dial (nodes, client_id), nodes)
    end
    | raft_d (state_machine, client_id, aliases) = 
        raft_d (state_machine, client_id, aliases, 50, false)

    fun raft (state_machine, client_id, n, snapshot_cond, verbose) =
        let val nodes = raft_spawn (state_machine, n, snapshot_cond, verbose)
        in (raft_dial (nodes, client_id), nodes)
    end
    | raft (state_machine, client_id) = 
        raft (state_machine, client_id, 5, 50, false)*)

    val default_aliases = ["@node1", "@node2", "@node3", "@node4", "@node5"]

    (* #IMPORT ./libs/state_machines/fib.trp *)

    val pid = self()
    val cluster = raft_spawn_alias (([], WAIT, fib_input), default_aliases)
    val dialer = raft_dial(cluster, pid)
in ()
end
