import lists
import quickselect

(*
    Log = {
        snapshot: Snapshot
        log: Entry[],
        lastApplied: int,
        commitIndex: int,
    }
    Snapshot = {
        snapshot: Some state
        lastIncludedIndex: int,
        lastIncludedTerm: int
    }
    Entry = {
        term: int,
        command: message
    }
*)


let fun not a = a = false
    fun send_to_all processes msg sender = map (fn x => send(x, msg)) (filter (fn x => x <> sender) processes)

    fun send_to_nth processes msg n = send((nth (reverse processes) n), msg)

    (*
        LOG FUNCTIONS BEGIN
    *)

    fun max a b = if a < b then b else a 

    fun min a b = if a > b then b else a

    fun set_snapshot snapshot index term =
    {
        snapshot = snapshot,
        lastIncludedIndex = index,
        lastIncludedTerm = term
    }

    fun take_snapshot state_machine index term = 
        let val pid = self()
            val _ = send (state_machine.pid, (state_machine.snapshot_gethook pid))
            val state = receive[hn ("SNAPSHOT", x) => x]
        in set_snapshot state index term
    end

    val empty_snapshot = set_snapshot () 0 0

    val empty_log = {
        log = [],
        snapshot = empty_snapshot,
        lastApplied = 0,
        commitIndex = 0
    }

    fun empty_log_with_snap snapshot = {
        log = [],
        snapshot = snapshot,
        lastApplied = 0,
        commitIndex = 0
    }

    fun append_message log message term = 
        let val new_entry = {
            term = term,
            command = message
        }
        in {
            log with 
            log = new_entry :: log.log
        } 
    end

    fun add_entries_to_log log entries term =
        case entries of
        [] => log
        | h :: t => add_entries_to_log (append_message log h.command term) t h.term

    fun update_applied log = {
        log with
        lastApplied = log.lastApplied + 1
    }
    
    fun update_commit log new_index = {
       log with 
       commitIndex = (max new_index log.commitIndex)
    }

    fun rollback_log log =
        let val _ = print log
            val (_ :: prev_log) = log.log
    in {
        log with 
        log = prev_log
    }
    end

    fun get_log_index log = (length log.log) + log.snapshot.lastIncludedIndex

    fun rollback_log_to log n = 
        if n < (get_log_index log) then
            let val log = rollback_log log
            in (rollback_log_to log n)
        end
        else log

    fun get_latest_entry_term log =
        case log.log of
        [] => log.snapshot.lastIncludedTerm
        | h :: _ => h.term

    fun get_latest_log_term log = get_latest_entry_term log

    fun get_latest_log_command log = 
        case log.log of
        [] => 0 (* Should not be reachable*)
        | h :: _ => h.command

    fun get_nth_command log index = nth (reverse log.log) index 

    fun get_commands_after_nth log_list n =
        case log_list of
        [] => []
        | h :: t =>
            if n = 0 then 
                h :: (get_commands_after_nth t (n)) 
            else get_commands_after_nth t (n - 1)

    fun apply_log log f = if log.lastApplied < log.commitIndex 
        then 
            let val _ = f ((get_nth_command log (log.lastApplied + 1)).command) 
            val log = update_applied log
            in apply_log log f end
        else log
    
    fun apply_snapshot state_machine log =
        let val lastCommitted = get_nth_command log log.commitIndex
            val uncommitted_entries = slice (get_log_index log) log.commitIndex log.log
            val snapshot = take_snapshot state_machine log.commitIndex lastCommitted.term
            val log = {log with log = uncommitted_entries}
        in { log with snapshot = snapshot }
    end
    (* LOG FUNCTIONS END *)


    (*
        LeaderInfo = {
            nextIndex = {
                peer: p,
                next: int
            }[],
            matchIndex = {
                peer: p,
                match: int
            }[]
        }
    *)

    (* LEADERINFO FUNCTIONS BEGIN*)

    fun new_leader all_nodes log = 
        let val nextIndex = get_log_index log
            val index = map (fn id => {peer = id, next = nextIndex + 1}) all_nodes
            val match_index = map (fn id => {peer = id, match = 0}) all_nodes
        in {
            nextIndex = index,
            matchIndex = match_index
        } end
    
    fun get_next_index leader_info peer = first (filter (fn (x) => x.peer = peer) leader_info.nextIndex)

    fun get_match_index leader_info peer = first (filter (fn (x) => x.peer = peer) leader_info.matchIndex)

    fun update_next_index leader_info peer new = let
        val prevIndex = get_next_index leader_info peer
        val newIndex = {peer = peer, next = new}
        val witoutPeer = filter (fn (x) => x.peer <> peer) leader_info.nextIndex
    in {
        leader_info with 
        nextIndex = newIndex :: witoutPeer
    } end

    fun update_match_index leader_info peer new = let
        val prevIndex = get_match_index leader_info peer
        val newIndex = {peer = peer, match = new}
        val witoutPeer = filter (fn (x) => x.peer <> peer) leader_info.matchIndex
    in {
        leader_info with 
        matchIndex = newIndex :: witoutPeer
    } end


    fun get_matches leader_info = map (fn x => x.match) leader_info.matchIndex

    fun calc_highest_commit matches = median matches

    (* LEADERINFO FUNCTIONS END*)

    (* KEY VALUE FUNCTIONS BEGIN *)

    fun key_val_store () = 
        let fun remove element list = 
            case list of 
            [] => []
            | h :: t => 
                if h = element then t
                else append [h] (remove element t)
        fun get_record key dic =
            case dic of
                [] => ()
                | h :: t => 
                    if h.key = key then h
                    else get_record key t
        fun get key dic = 
            let val record = get_record key dic
            in if record = () then ()
                else record.value
            end
        fun set (key, value) dic = 
            let val existing_record = get_record key dic 
                val new_record = {key = key, value = value}
            in if existing_record = () then 
                append [{key = key, value = value}] dic
            else 
                if new_record = existing_record then dic
                else append [new_record] (remove existing_record dic)
            end
        fun drop key dic = 
            remove (get_record key dic) dic
        val dic = []
        fun loop dic = 
            let val dic = receive [
                hn ("SET", (key, value)) => set (key, value) dic,
                hn ("GET", (key, sender_id)) => 
                    let val _ = send(sender_id, ("RESPONSE", (get key dic)))
                    in dic
                    end,
                hn ("GET_SNAPSHOT", sender_id) => 
                    let val _ = send(sender_id, ("SNAPSHOT", dic))
                    in dic
                    end,
                hn ("SET_SNAPSHOT", other_dic) => loop other_dic,
                hn ("DROP", key) => drop key dic
            ]
            in loop dic
            end
        in loop dic
    end
    (* KEY VALUE FUNCTIONS END*)

    fun start_timeout func duration = 
        let fun timeout () = 
            let val time = duration
                val _ = sleep time
            in func ()
            end
            val p_id = self()
        in spawn timeout
    end

    fun start_random_timeout func = start_timeout func (1000 + ((random ()) * 1000))

    (*
        StateMachine = {
            set_hook: string,
            get_hook: string,
            snapshothook: fn a, b => ... return true they should be merged, false otherwise
        }
    
    *)
    
    fun leader_node all_nodes id log term leader_info state_machine = 
        let val p_id = self()

            fun append_entries node =
                let val nextIndex = get_next_index leader_info node
                    val logIndex = get_log_index log
                in if logIndex + 1 >= nextIndex.next then 
                    let 
                        val prevLogIndex = nextIndex.next - 1
                        val prevEntryTerm = if prevLogIndex > 0 then (get_nth_command log prevLogIndex).term else 0
                        val entries = get_commands_after_nth (reverse log.log) prevLogIndex
                    in send(node, ("AppendEntries", entries, p_id, term, nextIndex.next - 1, prevEntryTerm, log.commitIndex))
                end
                else print "ERROR"
            end

            val _ = map (fn x => append_entries x) (filter (fn x => x <> p_id) all_nodes)
            val nonce = mkuuid ()
            val _ = start_timeout (fn () => send (p_id, ("SEND_HEARTBEAT", nonce))) 500
            fun loop log term leader_info = 
                let val log = update_commit log (calc_highest_commit (map (fn x => x.match) leader_info.matchIndex))
                val log = apply_log log (fn x => send (state_machine.pid, x))
                val _ = receive [
                    hn ("SEND_HEARTBEAT", x) when nonce = x =>
                        let val _ = printString (id^": Sending heartbeat")
                        in leader_node all_nodes id log term leader_info state_machine end,
                    
                    hn ("RAFT-UPDATE", x) => 
                        let val prevLogIndex = get_log_index log
                            val prevLogTerm = get_latest_log_term log
                            val log = append_message log (state_machine.sethook x) term
                            val leader_info = update_match_index leader_info p_id (get_log_index log)
                            val leader_info = update_next_index leader_info p_id ((get_log_index log) + 1)
                            val _ = printString (id^": Appending new message to log")
                        in leader_node all_nodes id log term leader_info state_machine end,

                    hn ("RAFT-GET", x) =>
                        let val _ = send (state_machine.pid, (state_machine.gethook x))
                        in loop log term leader_info end,

                    hn ("ACKNOWLEGDE", (peer, logIndex)) => (*Dette er hvis append er en success*)
                        let val leader_info = update_match_index leader_info peer logIndex 
                            val leader_info = update_next_index leader_info peer (logIndex + 1)
                        in (loop log term leader_info) end,
                    
                    hn ("REJECT", (peer, terminfo, logIndex)) => 
                        if term >= terminfo.term then 
                            let val leader_info = update_next_index leader_info peer (logIndex + 1) 
                            in loop log term leader_info 
                            end
                        else follower all_nodes id log terminfo.term () terminfo.leader state_machine,
                    hn ("RequestVote", (c_term, other_c_id, c_log_index, c_log_term, p_id)) when c_term > term =>
                        let val _ = send(p_id, ("YES-VOTE", id))
                        in follower all_nodes id log term other_c_id () state_machine
                        end,
                    
                    hn ("AppendEntries", x, l_id, other_term, prevIndex, prevTerm, commitIndex) when other_term > term => 
                        let val _ = printString (id^": received AppendEntries from leader, I must have lost position")
                        in follower all_nodes id log term () l_id state_machine
                        end,
                        
                    hn ("debug-printlog") =>
                        let val _ = print id
                            val _ = print log
                        val _ = print leader_info
                        in loop log term leader_info end,
                    hn ("debug-pause") =>
                        let fun pause () = receive [
                            hn ("debug-continue") => loop log term leader_info,
                            hn x => pause ()
                        ]
                        in pause () end,
                    hn ("debug-applysnapshot") =>
                        let val _ = print state_machine
                            val _ = print (apply_snapshot state_machine log)
                        in loop log term leader_info end,
                    hn _ => loop log term leader_info
                ] 
                in ()  (* Vi skal sørge for at genstarte løkken i receive ellers opdatere loggen ikke*)
            end
        in loop log term leader_info
    end

    and candidate all_nodes id log term state_machine =
        let val p_id = self()
            val nonce = mkuuid()
            val _ = printString (id^": I am now a candidate")
            val prevLogIndex = get_log_index log
            val prevLogTerm = get_latest_log_term log
            val _ = send_to_all all_nodes ("RequestVote", (term, id, prevLogIndex, prevLogTerm, p_id)) (p_id)
            val req_votes = ((length all_nodes) / 2)
            fun won_election () = 
                let val _ = printString (id^": I won the election")
                in leader_node all_nodes id log term (new_leader all_nodes log) state_machine
            end
            
            fun wait_for_votes (follower_votes, vote_amount) = 
                let fun loop () = receive [
                    hn ("JOIN_CLUSTER", p_id) => send(p_id, ("NOT_LEADER", ())),
                    hn ("YES-VOTE", follower_id) when (not (contains follower_id follower_votes)) => 
                        wait_for_votes ((append follower_votes [follower_id]), vote_amount + 1),

                    hn ("NO-VOTE", other_term) when other_term > term =>
                        follower all_nodes id log term () state_machine,

                    hn ("RequestVote", (c_term, other_c_id, c_log_index, c_log_term, p_id)) when c_term > term =>
                        let val _ = send(p_id, ("YES-VOTE", id))
                        in follower all_nodes id log term other_c_id () state_machine
                        end,
                    
                    hn ("AppendEntries", x, l_id, other_term, prevIndex, prevTerm, commitIndex) when other_term >= term => 
                        let val _ = printString (id^": received AppendEntries from leader, I must have lost position")
                        in follower all_nodes id log term () l_id state_machine
                        end,

                    hn ("VOTE-TIMEOUT", x) when x = nonce => candidate all_nodes id log (term + 1) state_machine,
                    hn ("debug-pause") =>
                        let fun loop () = receive [
                            hn ("debug-continue") => (),
                            hn x => loop ()
                        ]
                        in loop () end
                ]
                in if vote_amount >= req_votes then won_election () else loop ()
            end
            val _ = start_random_timeout (fn () => send(p_id, ("VOTE-TIMEOUT", nonce)))
        in wait_for_votes ([id], 1) 
    end
    
    and follower all_nodes id log term voted_for leader state_machine = 
        let val p_id = self()
            val nonce = mkuuid()
            val _ = start_random_timeout (fn () => send(p_id, ("ELECTION-TIMEOUT", nonce)))
            fun loop all_nodes log term voted_for leader = 
                let val log = apply_log log (fn x => send (state_machine.pid, x))
                fun start_election () =
                    let val _ = printString (id^": START ELECTION")
                    in candidate all_nodes id log (term + 1) state_machine
                    end
                val _ = receive [
                hn ("JOIN_CLUSTER", p_id) => send(p_id, ("NOT_LEADER", leader)),
                hn ("ADD_NODES", x) => 
                    follower (append all_nodes x) id log term voted_for leader state_machine,
                hn ("ELECTION-TIMEOUT", x) when x = nonce => start_election (),
                hn ("RequestVote", (c_term, c_id, c_log_index, c_log_term, p_id)) when c_id = voted_for =>
                    let val _ = send(p_id, ("YES-VOTE", id))
                        val _ = printString (id^": Voting yes")
                        in follower all_nodes id log c_term c_id leader state_machine
                        end,
                
                hn ("RequestVote", (c_term, c_id, c_log_index, c_log_term, p_id)) =>
                    let val latestLogIndex = get_log_index log
                        val latestLogTerm = get_latest_log_term log
                        fun no_vote () =
                            let val _ = send(p_id, "NO-VOTE")
                                val _ = printString (id^":voting no")
                            in follower all_nodes id log term voted_for leader state_machine
                        end
                        fun yes_vote () =
                            let val _ = send(p_id, ("YES-VOTE", id))
                                val _ = printString (id^": Voting yes")
                            in follower all_nodes id log c_term c_id leader state_machine
                        end
                    in 
                        if latestLogIndex > c_log_index then no_vote ()
                        else if latestLogTerm > c_log_term then no_vote ()
                        else if c_term <= term then no_vote ()
                        else yes_vote ()
                    end,
                hn ("AppendEntries", x, l_id, leader_term, prevLogIndex, prevLogTerm, leaderCommit) => 
                    let val leader = if leader <> () orelse term < leader_term then leader else l_id
                        val accepting = 
                            if leader_term < term then false
                            else if prevLogIndex > (get_log_index log) then false
                            else if (get_latest_log_term log) <> prevLogTerm then false
                            else true
                        val newlog = 
                            if accepting then
                                let val log = rollback_log_to log prevLogIndex
                                    val log = add_entries_to_log log x leader_term
                                in update_commit log (min leaderCommit (get_log_index log)) 
                                end
                            else log
                        val reject = fn () => send (l_id, ("REJECT", (p_id, {term = term, leader = leader}, (get_log_index newlog))))
                        val ack = fn () => send (l_id, ("ACKNOWLEGDE", (p_id, get_log_index newlog)))
                        val term = if term < leader_term then leader_term else term
                        val _ = if accepting then ack ()
                                else 
                                    let val _ = print "REJECTING"
                                    in reject ()
                                    end
                    in follower all_nodes id newlog term voted_for leader state_machine
                    end,
                hn ("debug-printlog") =>
                    let val _ = print id
                        val _ = print log 
                    in loop all_nodes log term voted_for leader end,
                hn ("debug-pause") =>
                    let fun loop () = receive [
                        hn ("debug-continue") => (),
                        hn x => loop ()
                    ]
                    in loop () end,
                hn ("debug-timeout") => start_election (),
                hn _ => loop all_nodes log term voted_for leader
            ]
            in loop all_nodes log term voted_for leader
        end
        in loop all_nodes log term voted_for leader
    end
    
    fun default_node all_nodes id state_machine_pid = 
        fn() => follower all_nodes id empty_log 1 () () state_machine_pid

    fun initiate_node all_nodes id state_machine sethook gethook snapshot_gethook snapshot_sethook = 
        let val state_machine_pid = spawn state_machine 
            val state_machine_record = 
                {pid = state_machine_pid, 
                sethook = sethook, 
                gethook = gethook, 
                snapshot_gethook = snapshot_gethook,
                snapshot_sethook = snapshot_sethook}
        in spawn (default_node all_nodes id state_machine_record)
    end
    fun initiate_distributed_node all_nodes id alias state_machine = 
        let val state_machine_pid = spawn(alias, state_machine)
        in spawn(alias, (default_node all_nodes id state_machine_pid))
    end
    
    fun initiate_nodes n state_machine sethook gethook snapshot_gethook snapshot_sethook =
        let fun get_nodes n acc_id =
                case n of
                0 => []
                | x => append 
                    (get_nodes (x - 1) (acc_id ^ "I")) 
                    [(initiate_node [] acc_id state_machine sethook gethook snapshot_gethook snapshot_sethook)]
            
            fun add_refs nodes = 
                let fun loop remaining = 
                    case remaining of
                    [] => ()
                    | h :: t => 
                        let val _ = send(h, ("ADD_NODES", nodes))
                        in loop t
                        end
                in loop nodes
                end
            val nodes = get_nodes n "I"
            val _ = add_refs nodes
        in nodes
    end

    fun ping () =
        let val _ = printString "Hello, World!"
            fun loop () = 
                let val _ = receive [
                    hn ("PING") => printString "PONG",
                    hn x => printString "Unrecognized message..."
                ]
                in loop()
            end
        in loop ()
    end

    fun key_val_store_init n =
        initiate_nodes n key_val_store 
                    (fn x => case x of (key, value) => ("SET", (key, value))) 
                    (fn (x, callback_pid) => ("GET", (x, callback_pid)))
                    (fn (callback_pid) => ("GET_SNAPSHOT", callback_pid))
                    (fn x => ("SET_SNAPSHOT", x))

    fun test_local n = 
        let 
            val all_nodes = key_val_store_init n
            val _ = send_to_nth all_nodes ("debug-timeout") 1
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "There")) (self())
            val _ = sleep 2000
            val _ = print "killing I"
            val _ = send_to_nth all_nodes ("debug-pause") 1
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "World")) (self())
            val _ = sleep 2000
            val _ = print "reviving I"
            val _ = send_to_nth all_nodes ("debug-continue") 1
            val _ = send_to_nth all_nodes ("RAFT-UPDATE", ("Hello", "Other World")) 1
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("debug-printlog") (self())
        in receive [hn x => print x]
    end

    fun test2_local n = 
        let 
            val all_nodes = key_val_store_init n
            val _ = send_to_nth all_nodes ("debug-timeout") 1
            val _ = send_to_nth all_nodes ("debug-timeout") 2
            val _ = sleep 10000
        in receive [hn x => print x]
    end

    fun test_snapshot n =
        let
            val all_nodes = key_val_store_init n
            val _ = send_to_nth all_nodes ("debug-timeout") 1
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "Here")) (self())
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "There")) (self())
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "Everything")) (self())
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "Everywhere")) (self())
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("All at", "once")) (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Hello", "There")) (self())
            val _ = send_to_all all_nodes ("debug-applysnapshot") (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("debug-applysnapshot") (self())
        in receive [hn x => print x]
    end


    fun initiate_3_distributed_nodes () =
        let 
            val node1 = initiate_distributed_node [] "1" "@node1" key_val_store
            val node2 = initiate_distributed_node [node1] "2" "@node2" key_val_store
            val node3 = initiate_distributed_node [node2, node1] "3" "@node3" key_val_store
            val all_nodes = [node1, node2, node3]
            val _ = send(node1, ("ADD_NODES", [node2, node3]))
            val _ = send(node2, ("ADD_NODES", [node3]))
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Victor", "Gruppemedlem 1")) (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Victor", "Gruppemedlem 2")) (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("debug-printlog") (self())
        in receive [hn x => print x]
    end

    fun raft state_machine_func set_hook get_hook =
        initiate_nodes 5 state_machine_func set_hook get_hook
        
in test_snapshot 3
end