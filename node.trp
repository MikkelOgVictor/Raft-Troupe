import lists
import stdio
import quickselect

(*
    Log = {
        snapshot: Snapshot
        log: Entry[],
        lastApplied: int,
        commitIndex: int,
        lastMessageSerial: string
    }
    Snapshot = {
        snapshot: Some state
        lastIncludedIndex: int,
        lastIncludedTerm: int
    }
    Entry = {
        term: int,
        command: message,
        serial: string
    }
*)

(*
    LeaderInfo = {
        nextIndex = {
            peer: p,
            next: int
        }[],
        matchIndex = {
            peer: p,
            match: int
        }[]
    }
*)

(*
    StateMachine = {
        set_hook : fn (x: string) => x: string
        get_hook : fn (x: string, callback_pid: string) => x: string
        set_snapshot_hook: fn (x: string) => x: string
        get_snapshot_hook : fn (callback_pid: string)  => x: string
        snapshot_condition_hook : fn (log_summary: LogSummary, callback_pid:
        string) => x: bool
    }
    LogSummary = {
        log_size: int,
        entries_since_snap: int
    }

*)

(*
    Node = {
        all_nodes: string[],
        id: string,
        log: Log,
        term: int,
        voted_for: string,
        leader: string,
        leader_info: LeaderInfo,
        state_machine_pid,
        hooks: StateMachine,
        total_nodes: int,
        verbose: boolean
    }
*)


let fun not a = a = false
    fun send_to_all processes msg sender = map (fn x => send(x, msg)) (filter (fn x => x <> sender) processes)

    fun send_to_nth processes msg n = send((nth (reverse processes) n), msg)

    fun max a b = if a < b then b else a 

    fun min a b = if a > b then b else a

    (* #IMPORT libs/log.trp *)

    (* #IMPORT libs/key-val.trp *)

    (* #IMPORT libs/leader-info.trp *)

    fun verbose_print x verbose = if verbose then print x else ()

    (* Executes a function after a given timeout *)
    fun start_timeout func duration = 
        let fun timeout () = 
            let val time = duration
                val _ = sleep time
            in func ()
            end
            val p_id = self()
        in spawn timeout
    end

    (* Starts a random timeout with lower=2sec and upper=4sec *)
    fun start_random_timeout func = start_timeout func (2000 + ((random ()) * 2000))
    
    fun leader_node node = 
        let val p_id = self()
            (* Appends appends all entries from a follower's nextIndex to the leader's log index*)
            fun append_entries follower_pid =
                    let val nextIndex = get_next_index node.leader_info follower_pid
                    val logIndex = get_log_index node.log
                in if logIndex + 1 >= nextIndex.next then 
                    let 
                        val latestLogIndex = nextIndex.next - 1
                    in 
                        (* Sends the snapshot if the followers nextIndex is before the Snapshot's lastIncludedIndex *)
                        if nextIndex.next <= node.log.snapshot.lastIncludedIndex 
                            then send(follower_pid, ("Snapshot", node.log.snapshot, p_id, node.term))
                        else 
                            let val entries = get_commands_after_nth node.log latestLogIndex
                                val afterSnapshot = latestLogIndex - node.log.snapshot.lastIncludedIndex
                                val prevEntryTerm = 
                                    if afterSnapshot > 0 then (get_nth_command node.log latestLogIndex).term 
                                    else node.log.snapshot.lastIncludedTerm
                            in send(follower_pid, ("AppendEntries", entries, p_id, node.term, latestLogIndex, prevEntryTerm, node.log.commitIndex))
                        end
                end
                (* A follower should never get more entries than the leader *)
                else print "ERROR"
            end

            (* Convert leader to follower *)
            fun demote term leader voted_for node = 
                {node with 
                    term = term, 
                    leader = leader,
                    leader_info = (),
                    voted_for = voted_for}

            (* Applies all committed nodes that have not already been applied *)
            fun apply_committed node = 
                let val prev_commit = node.log.commitIndex
                    val highest_commit = calc_highest_commit (map (fn x => x.match) node.leader_info.matchIndex)
                    val node = { node with log = update_commit node.log highest_commit }
                    val applied_log = apply_log node.log (fn x => send (node.state_machine_pid, x))
                    val snapshot_log = 
                        if prev_commit < highest_commit then 
                            evaluate_snapshot_cond node.state_machine_pid node.hooks applied_log 
                        else 
                            applied_log
                in { node with log = snapshot_log }
                end
            val nonce = mkuuid ()
            fun loop node = let val node = node
                in receive [
                    hn ("SEND_HEARTBEAT", x) when nonce = x =>
                        let val _ = verbose_print (node.id^": Sending heartbeat") node.verbose
                        in leader_node node end,

                    (* Message has already been received and appended *)
                    hn (("RAFT-UPDATE", x), dialer_id, serial_n) when serial_n = node.log.lastMessageSerial =>
                        send(dialer_id, "DIALER-ACK");
                        loop node,

                    (* Message has not been appended before *)
                    hn (("RAFT-UPDATE", x), dialer_id, serial_n) => 
                        let val latestLogIndex = get_log_index node.log
                            val prevLogTerm = get_latest_log_term node.log
                            val log = append_message node.log (node.hooks.sethook x) node.term serial_n
                            val leader_info = update_match_index node.leader_info p_id (get_log_index log)
                            val leader_info = update_next_index leader_info p_id ((get_log_index log) + 1)
                            val node = {node with log = log, leader_info = leader_info}
                        in 
                            verbose_print (node.id^": Appending new message to log") node.verbose;
                            send(dialer_id, "DIALER-ACK");
                            loop node end,

                    hn (("RAFT-GET", x), dialer_id) =>
                        send (node.state_machine_pid, (node.hooks.gethook x));
                        send(dialer_id, "DIALER-ACK");
                        loop node,

                    (* If append is successful on a follower*)
                    hn ("ACKNOWLEGDE", (peer, logIndex)) => 
                        let val node = { node with leader_info = update_match_index node.leader_info peer logIndex }
                            val node = { node with leader_info = update_next_index node.leader_info peer (logIndex + 1) }
                        in loop (apply_committed node) end,
                    
                    (* If append is unsuccessful *)
                    hn ("REJECT", (peer, terminfo, logIndex)) => 
                        if node.term >= terminfo.term then 
                            let val node = { node with leader_info = update_next_index node.leader_info peer ((min (get_log_index node.log) (logIndex)) + 1) } 
                            in loop node 
                            end
                        else follower (demote terminfo.term terminfo.leader ()
                        node),

                    (* If another node has been elected as a candidate, and
                        their term is in front of ours, convert to a follower *)
                    hn ("RequestVote", (c_term, c_id, c_log_index, c_log_term)) when c_term > node.term =>
                        verbose_print (node.id^": Voting yes") node.verbose;
                        send(c_id, ("YES-VOTE", node.id));
                        follower (demote c_term () c_id node),

                    (* If we receive snapshot from a leader in a higher term,
                    convert to follower *)
                    hn ("Snapshot", snapshot, l_id, other_term) when other_term > node.term =>
                        let val _ = verbose_print (node.id^": received Snapshot from leader, I must have lost position") node.verbose
                        in follower (demote other_term l_id () node)
                        end,
                    
                    (* If we receive AppendEntries from a leader in a higher term,
                    convert to follower *)
                    hn ("AppendEntries", x, l_id, other_term, prevIndex, prevTerm, commitIndex) when other_term > node.term => 
                        verbose_print (node.id^": received AppendEntries from leader, I must have lost position") node.verbose;
                        follower (demote other_term l_id () node),
                    
                    (* Prints log *)
                    hn ("debug-printlog") =>
                        pretty_print_log node.id node.log;
                        print node.leader_info;
                        loop node,

                    (* Halts the leader *)
                    hn ("debug-pause") =>
                        let fun pause () = receive [
                            hn ("debug-continue") => loop node,
                            hn x => pause ()
                        ]
                        in pause () end,

                    (* Applies a snapshot *)
                    hn ("debug-applysnapshot") =>
                        let 
                            val snapshot = get_snapshot node.state_machine_pid node.hooks node.log
                            val node = case snapshot.snapshot of
                            () => node
                            | _ => {node with log = apply_snapshot node.state_machine_pid snapshot node.log}
                        in 
                            verbose_print (node.id^": applying snapshot") node.verbose;
                            loop node end,

                    (* Asks the state-machine for the snapshot condition *)
                    hn ("debug-snapshotcond") =>
                        print (evaluate_snapshot_cond node.state_machine_pid node.hooks node.log);
                        loop node,
                    hn _ => loop node
                ] end
        in 
            (* Append entries for each follower *)
            map (fn x => append_entries x) (filter (fn x => x <> p_id) node.all_nodes);
            start_timeout (fn () => send (p_id, ("SEND_HEARTBEAT", nonce))) 500;
            loop node
    end

    and candidate node =
        let val p_id = self()

            (* A candidate cannot vote for anyone and has no leader *)
            val node = {node with voted_for = (), leader = ()}
            val nonce = mkuuid()

            (* Sends a vote request to all followers *)
            val latestLogIndex = get_log_index node.log
            val prevLogTerm = get_latest_log_term node.log
            

            (* Becoming a leader requires majority vote *)
            val req_votes = ((length node.all_nodes) / 2)
            fun won_election () = 
                verbose_print (node.id^": I won the election") node.verbose;
                leader_node ({ 
                    node with leader_info = (new_leader node.all_nodes
                    node.log),
                    leader = p_id })
            
            fun wait_for_votes (follower_votes, vote_amount) = 
                let 
                    fun loop () = receive [
                    (* Received a vote from a follower we have not already
                    received a vote from *)
                    hn ("YES-VOTE", follower_id) when (not (contains follower_id follower_votes)) => 
                        wait_for_votes ((append follower_votes [follower_id]), vote_amount + 1),

                    (*We received a no-vote from a follower in a later term.
                    This can only happen if there is a leader/candidate in this
                    term, and as such, we convert to a follower *)
                    hn ("NO-VOTE", other_term) when other_term > node.term =>
                        follower node,

                    (* Received vote request from leader in later term *)
                    hn ("RequestVote", (c_term, other_c_id, c_log_index, c_log_term)) when c_term > node.term =>
                        let val _ = send(other_c_id, ("YES-VOTE", node.id))
                        in follower ({ node with term = c_term, voted_for = other_c_id})
                        end,
                    
                    (* Received message from leader in a term at least as
                    up-to-date as ours. Because of this, we must have lost the
                    election *)
                    hn ("AppendEntries", x, l_id, other_term, prevIndex, prevTerm, commitIndex) when other_term >= node.term => 
                        let val _ = verbose_print (node.id^": received AppendEntries from leader, I must have lost position") node.verbose
                        in follower ({ node with leader = l_id})
                        end,

                    (* Election timeout, send out another request vote *)
                    hn ("VOTE-TIMEOUT", x) when x = nonce => candidate {node with term = node.term + 1},

                    (* Halts the candidate *)
                    hn ("debug-pause") =>
                        let fun loop () = receive [
                            hn ("debug-continue") => (),
                            hn x => loop ()
                        ]
                        in loop () end,
                    hn _ => loop ()
                ]
                in if vote_amount >= req_votes then won_election () else loop ()
            end
        in 
            verbose_print (node.id^": I am now a candidate") node.verbose;
            send_to_all node.all_nodes ("RequestVote", (node.term, p_id, latestLogIndex, prevLogTerm)) (p_id);
            start_random_timeout (fn () => send(p_id, ("VOTE-TIMEOUT", nonce)));
            wait_for_votes ([node.id], 1) 
    end
    
    and follower node = 
        let val p_id = self()
            val nonce = mkuuid()
            val _ = start_random_timeout (fn () => send(p_id, ("ELECTION-TIMEOUT", nonce)))
            
            (* Sends a yes-vote to a candidate *)
            fun vote_for c_id c_term node = 
                send(c_id, ("YES-VOTE", node.id));
                { node with term = c_term, voted_for = c_id } 
            fun loop node = 
                let val node = { node with log = apply_log node.log (fn x => send (node.state_machine_pid, x)) }
                fun start_election () =
                    let val _ = verbose_print (node.id^": START ELECTION") node.verbose
                    in candidate ({node with term = node.term + 1})
                    end
                val _ = receive [
                    (* Starts an election *)
                    hn ("ELECTION-TIMEOUT", x) when x = nonce => start_election (),

                    (* Sends a re-vote to a candidate we already voted for *)
                    hn ("RequestVote", (c_term, c_id, c_log_index, c_log_term)) when c_id = node.voted_for =>
                        verbose_print (node.id^": Voting yes") node.verbose;
                        follower (vote_for c_id c_term node),
                    
                    (* If we receive a vote request, vote yes if: the log is a
                    up-to-date and the term of the candidate is later than our
                    current. Vote no otherwise *)
                    hn ("RequestVote", (c_term, c_id, c_log_index, c_log_term)) =>
                        let val latestLogIndex = get_log_index node.log
                            val latestLogTerm = get_latest_log_term node.log
                            fun no_vote () =
                                send(c_id, "NO-VOTE");
                                verbose_print (node.id^":voting no") node.verbose;
                                follower node
                            fun yes_vote () =
                                verbose_print (node.id^": Voting yes") node.verbose;
                                follower (vote_for c_id c_term node)
                        in 
                            if latestLogIndex > c_log_index then no_vote ()
                            else if latestLogTerm > c_log_term then no_vote ()
                            else if c_term <= node.term then no_vote ()
                            else yes_vote ()
                        end,

                    (* When receiving a snapshot from a leader in a later or
                    same term, acknowledge if it contains entries past our
                    current log index. Update leader and term accordingly. *) 
                    hn ("Snapshot", x, l_id, leader_term) => 
                        let val node = {node with leader = 
                                if node.leader = () orelse node.term < leader_term then l_id 
                                else node.leader} 

                            val {snapshot, lastIncludedIndex, lastIncludedTerm} = x 
                            val log_term = get_latest_log_term node.log 
                            val log_index = get_log_index node.log

                            val accepting = 
                                if leader_term < node.term then false
                                else if lastIncludedIndex <= log_index then false
                                else true

                            val newlog = if accepting then apply_snapshot node.state_machine_pid x node.log else node.log
                            val reject = fn () => send (l_id, ("REJECT", (p_id, {term = term, leader = leader}, (get_log_index newlog))))
                            val ack = fn () => send (l_id, ("ACKNOWLEGDE", (p_id, get_log_index newlog)))

                            val newlog = if accepting then apply_snapshot node.state_machine_pid x node.log else node.log
                            val reject = 
                                fn () => send (l_id, ("REJECT", (p_id, {term = node.term, leader = node.leader}, (get_log_index newlog))))
                            val ack = 
                                fn () => send (l_id, ("ACKNOWLEGDE", (p_id, get_log_index newlog)))

                            val node = {node with term = (if node.term < leader_term then leader_term else node.term)}
                            
                        in 
                            (if accepting then ack ()
                                    else reject ());
                            follower {node with log = newlog}
                        end,

                    (* When receiving entries from a leader in a later or
                    same term, acknowledge if it contains entries past our
                    current log index. And if the latest log index matches ours.
                    Update log accordingly.*)
                    hn ("AppendEntries", x, l_id, leader_term, latestLogIndex, prevLogTerm, leaderCommit) => 
                        let val node = {node with leader = 
                                if node.leader = () orelse node.term <= leader_term then l_id
                                else node.leader}
                            val accepting = 
                                if leader_term < node.term then false
                                else if latestLogIndex > (get_log_index node.log) then 
                                    false
                                else if (get_latest_log_term node.log) <> prevLogTerm andalso prevLogTerm > 0 then 
                                    false
                                else true
                            val newlog = 
                                if accepting then
                                    let val log = rollback_log_to node.log latestLogIndex
                                        val log = add_entries_to_log log x leader_term
                                    in update_commit log (min leaderCommit (get_log_index log)) 
                                    end
                                else node.log
                            val reject = 
                                fn () => send (l_id, ("REJECT", (p_id, {term = node.term, leader = node.leader}, (get_log_index newlog))))
                            val ack = 
                                fn () => send (l_id, ("ACKNOWLEGDE", (p_id, get_log_index newlog)))

                            val node = {node with term = (if node.term < leader_term then leader_term else node.term)}
                            val _ = if accepting then ack ()
                                    else 
                                        let val _ = verbose_print (node.id^": REJECTING") node.verbose
                                        in reject ()
                                        end
                        in follower {node with log = newlog}
                        end,

                    (* If client sends update, sends the leader's id *)
                    hn (("RAFT-UPDATE", x), dialer_id, serial_n) => 
                        send(dialer_id, ("NOT-LEADER", node.leader)),
                    
                    (* If client sends get, send the leader's id*)
                    hn (("RAFT-GET", x), dialer_id) => 
                        send(dialer_id, ("NOT-LEADER", node.leader, x)),

                    (* Prints the log *)
                    hn ("debug-printlog") =>
                        pretty_print_log node.id node.log,

                    (* Halts the follower *)
                    hn ("debug-pause") =>
                        let fun loop () = receive [
                            hn ("debug-continue") => (),
                            hn x => loop ()
                        ]
                        in loop () end,

                    (* Start an election, electing this follower to a candidate
                    *)
                    hn ("debug-timeout") => start_election (),
                    hn _ => 
                        loop node
            ]
            in loop node
        end
        in loop node
    end

    fun dormant_node node =
        if length(node.all_nodes) < node.node_amount then
            receive [
                (* Adds a node to the cluster, only used for initialization *)
                hn ("ADD_NODES", x) => 
                    dormant_node ({node with all_nodes = append node.all_nodes x})
            ]
        else follower node
    
    (* Defines a default node, being a follower in term 1 without a leader and
    the state-machine in its beginning state *)
    fun default_node id hooks all_nodes node_amount verbose state_machine_pid = 
        let val node = {
            all_nodes = all_nodes,
            id = id,
            log = empty_log,
            term = 1,
            voted_for = (),
            leader = (),
            leader_info = (),
            state_machine_pid = state_machine_pid,
            hooks = hooks,
            node_amount = node_amount,
            verbose = verbose
        }
        in fn() => printString (id^": Starting node..."); dormant_node node
    end

    (* Spawn a state-machine on a seperate thread, creates a record*)
    fun initiate_node state_machine_func hooks node_amount id verbose = 
        let val state_machine_pid = spawn state_machine_func
        in spawn (default_node id hooks [] node_amount verbose state_machine_pid)
    end

    (* Sends a list of all nodes to all nodes *)
    fun add_refs nodes = 
        map (fn x => send(x, ("ADD_NODES", nodes))) nodes
    
    (* Spawn n nodes*)
    fun initiate_nodes n state_machine hooks verbose =
        let val part_init = initiate_node state_machine hooks n
            fun spawn_nodes n acc_id =
                case n of
                0 => []
                | x => append 
                    (spawn_nodes (x - 1) (acc_id ^ "I")) 
                    [(part_init acc_id verbose)]

            val nodes = spawn_nodes n "I"
        in 
            add_refs nodes;
            nodes
    end

    (* Spawn a state-machine on some alias *)
    fun initiate_distributed_node state_machine hooks node_amount id alias verbose = 
        let val state_machine_pid = spawn(alias, state_machine)
        in spawn(alias, (default_node id hooks [] node_amount verbose state_machine_pid))

    end

    fun initiate_distributed_nodes aliases state_machine hooks verbose =
        let val part_init = initiate_distributed_node state_machine hooks (length(aliases))
            fun spawn_nodes acc acc_id =
                case acc of 
                [] => []
                | h :: t =>
                    append (spawn_nodes t (acc_id ^ "I")) [part_init acc_id h verbose]
            val nodes = spawn_nodes aliases "I"
        in 
            add_refs nodes;
            nodes
    end
                    
    (* Facilitates client-side interaction to the Raft cluster *)
    fun dialer cluster = 
        let val p_id = self()
            fun random_leader () =
                let fun roundUp n m = 
                        if n <= 0 then m else roundUp (n - 1) (m + 1)
                    val r_n = roundUp (random() * (length cluster - 1)) 0 
                in nth cluster r_n
            end
            val leader = random_leader ()

            fun send_message msg leader = let 
                val nonce = mkuuid()
                val msg_timeout = start_timeout (fn() => send(p_id, ("MESSAGE-TIMEOUT", nonce)))
                fun wait () =
                    receive [
                    hn ("NOT-LEADER", leader_id) => 
                        send_message msg leader_id,
                    hn ("DIALER-ACK") => leader,
                    hn ("MESSAGE-TIMEOUT", x) => 
                        if x = nonce then send_message msg (random_leader ())
                        else wait ()
                ]
                in
                    (case leader of
                    () => msg_timeout 500
                    | x =>                         
                        msg_timeout 2000; 
                        send(x, msg));
                    wait ()
            end

            fun update_message x leader = let 
                val serial_n = mkuuid()
                in send_message (("RAFT-UPDATE", x), p_id, serial_n) leader
            end

            fun get_message x leader = send_message (("RAFT-GET", x), p_id) leader


            fun loop leader =     
                let val leader = receive [
                    hn ("RAFT-UPDATE", x) =>
                        update_message x leader,

                    hn ("RAFT-GET", x) =>
                        get_message x leader,

                    hn ("SEND-TO-NTH", n, x) =>
                        send_to_nth cluster x n;
                        leader,

                    hn ("SEND-TO-ALL", x) => 
                        send_to_all cluster x (self());
                        leader,
                    hn x => leader ]
                in loop leader end
        in loop leader
    end

    (* Spawns a distributed Raft network, and a dialer, which can be contacted to
    communicate with their state-machines *)
    fun raft_d aliases state_machine_func hooks verbose =
        let val nodes = initiate_distributed_nodes aliases state_machine_func hooks verbose
        in spawn (fn () => dialer nodes)
    end

    (* Spawns a Raft network, and a dialer, which can be contacted to
    communicate with their state-machines *)
    fun raft state_machine_func hooks verbose =
        let val nodes = initiate_nodes 5 state_machine_func hooks verbose
        in spawn (fn () => dialer nodes)
    end

    (* Application of the local Raft algorithm on a key-value-store*)
    fun key_val_store_init verbose = raft key_val_store key_val_store_hooks verbose

    (* Application of the distributed Raft algorithm on a key-value-store*)
    fun key_val_store_init_d aliases verbose = raft_d aliases key_val_store key_val_store_hooks verbose
    val default_aliases = ["@node1", "@node2", "@node3"]
    (* #IMPORT libs/tests.trp *)

in test1 (fn () => key_val_store_init_d default_aliases true) 
end
