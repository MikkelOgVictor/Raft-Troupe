let 
    fun sleep_timer time done_action = 
        let val p_id = self()

            fun timer timehandler_pid cur_time timer_doneaction = 
                let val p_id = self()
                    val (time, reset) = 
                        sleep 95;
                        send(timehandler_pid, ("REQUEST-TIME", p_id));
                        receive[hn x => x]
                in 
                    print cur_time;
                    if cur_time > 1 then
                        if reset then timer timehandler_pid time timer_doneaction
                        else timer timehandler_pid (cur_time - 100) timer_doneaction
                    else timer_doneaction () end
            
            fun loop (base_time, reset) =
                loop (receive[
                    hn ("REQUEST-TIME", p_id) => 
                        send(p_id, (base_time, reset));
                        (base_time, false),
                    hn ("SET-TIMER", x) => (x, true),
                    hn ("RESET-TIMER") => (base_time, true)
                ])
        in 
            spawn(fn() => timer p_id time done_action);
            loop (time, false)
    end
    val timer_pid = spawn(fn() => sleep_timer 5000 (fn () => print "Hi!"))
in 
    sleep 5000;
    print "Hi!"
end