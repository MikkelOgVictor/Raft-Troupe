(* EXPORT START *)
fun ping_init n verbose = raft n ping 0 ping_hooks verbose 
fun ping_test1 () = let 
  val raft = ping_init 5 true
  val pid = self ()
in 
  print "Starting Test";
  sleep 1000;
  send (raft, ("RAFT-GET", ("ping", pid))) ;
  print (receive [hn x => x]);
  send (raft, ("RAFT-GET", ("ping", pid))) ;
  print (receive [hn x => x]);
  send_delay (raft, ("RAFT-GET", ("ping", pid))) 1000;
  print (receive [hn x => x]);
  send_delay (raft, ("RAFT-GET", ("ping", pid))) 2000;
  print (receive [hn x => x]);
  send_delay (raft, ("RAFT-GET", ("get", pid))) 200;
  print (receive [hn x => x])
end

fun ping_test2 () = let 
  val raft = ping_init 5 false
  val pid = self ()

  fun loop x = if x > 0 then
    send (raft, ("RAFT-GET", ("ping", pid)));
    print (receive [hn x => x]);
    sleep 1000;
    send (raft, ("RAFT-GET", ("get", pid)));
    print (receive [hn x => x]);
    loop (x - 1)
  else 
    send (raft, ("RAFT-GET", ("ping", pid)));
    print (receive [hn x => x]);
    send_delay (raft, ("RAFT-GET", ("get", pid))) 1500;
    print (receive [hn x => x])
  in 
    send (raft, ("SEND-TO-NTH", 1, "debug-timeout"));
    loop 4
end

fun ping_test3 () = let 
  val raft = ping_init 5 false
  val pid = self ()

  fun loop x = if x > 0 then
    send (raft, ("RAFT-GET", ("ping", pid)));
    print (receive [hn x => x]);
    sleep 1000;
    send (raft, ("RAFT-GET", ("get", pid)));
    print (receive [hn x => x]);
    loop (x - 1)
  else
    send (raft, ("RAFT-GET", ("ping", pid)));
    print "Crashing Leader";
    send (raft, ("SEND-TO-NTH", 1, "debug-pause"));
    print (receive [hn x => x]);
    send_delay (raft, ("RAFT-GET", ("get", pid))) 1500;
    print (receive [hn x => x]);
    send_delay (raft, ("SEND-TO-NTH", 1, ("debug-continue"))) 1000
  in 
    send (raft, ("SEND-TO-NTH", 1, "debug-timeout"));
    loop 4
end



(* EXPORT END *)
