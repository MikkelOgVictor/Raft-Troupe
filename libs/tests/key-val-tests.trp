
let 
    (* EXPORT START *)
    fun send_delay (to, m) delay =
        sleep delay;
        send (to, m)

    fun send_n_updates raft n =
        let fun loop n =
            send(raft, ("RAFT-UPDATE", ("TEST", "TEST")));
            print n;
            sleep 10;
            if n > 1 then loop (n - 1) else () 
        in loop n 
    end

    fun send_n_unique_updates raft n =
        let fun loop n =
            send(raft, ("RAFT-UPDATE", (mkuuid(), "TEST")));
            print n;
            sleep 10;
            if n > 1 then loop (n - 1) else ()
        in loop n
    end

    fun assert_equals a b =
        if a = b then ()
        else print "Assertion Error, expected"; print a; print "Actual:"; print b
        
    fun run_test raft_func =
         raft_func

    fun test1 raft_func = 
        let val raft = raft_func ()
        in
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 500;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-pause")) 1000;
            print "killing I";
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "World"))) 500;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-continue")) 8000;
            print "reviving I";
            send(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("Hello", "Other World"))));
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 2000
    end

    fun test2 raft_func = 
        let val raft = raft_func ()
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send(raft, ("SEND-TO-NTH", 2, "debug-timeout"));
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 1000
    end

    fun test3 raft_func = 
        let val p_id = self()
            val raft = raft_func ()
        in 
            send_delay(raft, ("RAFT-UPDATE", ("A", 42))) 2000;
            send_delay(raft, ("RAFT-GET", ("A", p_id))) 1000;
            receive [hn x => print x]
    end

    fun test4 raft_func = 
        let val raft = raft_func ()
        in
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 2000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 4000
    end

    fun test5 raft_func =
        let val raft = raft_func ()
        in
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_n_updates raft 51;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 5000
    end

    fun test6 raft_func = 
        let val raft = raft_func ()
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("RAFT-UPDATE", ("A", 2))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("A", 3))) 500;
            send_delay(raft, ("RAFT-UPDATE", ("A", 4))) 10;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 5000
    end

    fun test_snapshot raft_func =
        let val raft = raft_func ()
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("SEND-TO-NTH", 3, "debug-pause")) 100;
            print "sending 1";
            send(raft, ("RAFT-UPDATE", ("A", 1)));
            print "sending 2";
            send_delay(raft, ("RAFT-UPDATE", ("A", 2))) 50;
            print "sending 3";
            send_delay(raft, ("RAFT-UPDATE", ("A", 4))) 50;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-printlog")) 1000;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-applysnapshot")) 5000;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-printlog")) 1000
    end

    fun test_lots_of_messages raft_func = 
        let val raft = raft_func ()
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            sleep 1000;
            send_n_updates raft 1000;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 5000
    end

    fun test_lots_of_unique_messages raft_func = 
        let val raft = raft_func ()
        in
            sleep 5000;
            send_n_unique_updates raft 1000;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 1000
    end

    (* Application of the local Raft algorithm on a key-value-store*)
    fun key_val_store_init n verbose = raft n key_val_store key_val_store_hooks verbose
    (* Application of the distributed Raft algorithm on a key-value-store*)
    fun key_val_store_init_d aliases verbose = raft_d aliases key_val_store key_val_store_hooks verbose


    (* EXPORT END *)