
let 
    (* EXPORT START *)
    fun send_delay (to, m) delay =
        sleep delay;
        send (to, m)

    fun send_n_updates raft n =
        let fun loop n =
            send(raft, ("RAFT-UPDATE", ("TEST", "TEST")));
            print n;
            sleep 10;
            if n > 1 then loop (n - 1) else () 
        in loop n 
    end

    fun send_n_unique_message raft n =
        let fun loop n =
            send(raft, ("RAFT-UPDATE", (mkuuid(), "TEST")));
            print n;
            sleep 10;
            if n > 1 then loop (n - 1) else ()
        in loop n
    end


    fun test1_local () = 
        let val raft = key_val_store_init true
        in
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 500;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-pause")) 1000;
            print "killing I";
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "World"))) 500;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-continue")) 8000;
            print "reviving I";
            send(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("Hello", "Other World"))));
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 2000
    end

    fun test2_local () = 
        let val raft = key_val_store_init true
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send(raft, ("SEND-TO-NTH", 2, "debug-timeout"));
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 1000
    end

    fun test3_local () = 
        let val p_id = self()
            val raft = key_val_store_init true
        in 
            send_delay(raft, ("RAFT-UPDATE", ("A", 42))) 2000;
            send_delay(raft, ("RAFT-GET", ("A", p_id))) 1000;
            receive [hn x => print x]
    end

    fun test4_local () = 
        let val raft = key_val_store_init true
        in
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 2000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("RAFT-UPDATE", ("Hello", "There"))) 1000;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 4000
    end

    fun test5_local () =
        let val raft = key_val_store_init true
        in
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_n_updates raft 5;
            send(raft, ("SEND-TO-NTH", 1, "debug-snapshotcond"))
    end

    fun test6_local () = 
        let val raft = key_val_store_init true
        in
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("B", 1)))) 2000;
            send_delay(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("A", 1)))) 2000;
            send_delay(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("A", 1)))) 0;
            send_delay(raft, ("SEND-TO-NTH", 1, ("RAFT-UPDATE", ("A", 1)))) 0;
            send_delay(raft, ("SEND-TO-NTH", 3, "debug-timeout")) 10;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 5000
    end

    fun test_snapshot () =
        let val raft = key_val_store_init true
        in 
            send(raft, ("SEND-TO-NTH", 1, "debug-timeout"));
            send_delay(raft, ("SEND-TO-NTH", 3, "debug-pause")) 100;
            send(raft, ("RAFT-UPDATE", ("A", 1)));
            send_delay(raft, ("RAFT-UPDATE", ("A", 2))) 50;
            send_delay(raft, ("RAFT-UPDATE", ("A", 4))) 50;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-applysnapshot")) 100;
            send_delay(raft, ("SEND-TO-NTH", 3, "debug-continue")) 100;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 500
    end

    fun test_lots_of_messages () = 
        let val raft = key_val_store_init true 
        in 
            sleep 2000;
            send_n_updates raft 1000;
            send_delay(raft, ("SEND-TO-NTH", 1, "debug-applysnapshot")) 5000;
            send_n_updates raft 1000;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 1000
    end

    fun test_lots_of_unique_messages () = 
        let val raft = key_val_store_init true
        in
            sleep 5000;
            send_n_unique_message raft 5;
            send_delay(raft, ("SEND-TO-ALL", "debug-printlog")) 1000
    end
    (* EXPORT END *)
    
    (*fun initiate_3_distributed_nodes () =
        let 
            val node1 = initiate_distributed_node [] "1" "@node1" key_val_store
            val node2 = initiate_distributed_node [node1] "2" "@node2" key_val_store
            val node3 = initiate_distributed_node [node2, node1] "3" "@node3" key_val_store
            val all_nodes = [node1, node2, node3]
            val _ = send(node1, ("ADD_NODES", [node2, node3]))
            val _ = send(node2, ("ADD_NODES", [node3]))
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Victor", "Gruppemedlem 1")) (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("RAFT-UPDATE", ("Victor", "Gruppemedlem 2")) (self())
            val _ = sleep 2000
            val _ = send_to_all all_nodes ("debug-printlog") (self())
        in receive [hn x => print x]
    end*)