import lists 

let 
  (* EXPORT START *)

  fun epoch_counter start = let
    val p_id = self ()
    fun timeout n = sleep (350); send (p_id, ("TIMEOUT", n))


    fun main_loop counter changes = let
      val nonce = mkuuid ()
      val _ = spawn (fn () => timeout nonce)

      fun loop counter changes = 
        receive [
          hn ("TIMEOUT", x) when x = nonce => 
            main_loop 
              {counter with y = counter.y + 1} 
              ("INCREMENT" :: changes),

          hn ("INCREMENT") => 
            main_loop
              {counter with y = counter.y + 1}
              changes,

          hn ("INCREASE_EPOCH") => 
            loop 
              {counter with x = counter.x + 1}
              changes,

          hn ("GET_STATE", callback) => 
            send (callback, counter); 
            loop counter changes,

          hn ("SNAP_COND", (summary, callback)) =>
            send (callback, (
              "SNAPSHOT_CALLBACK", summary.entries_since_snap > 20
          )); loop counter changes,

          hn ("GET_SNAPSHOT", callback) =>
            send (callback, ("STATE_CALLBACK", counter));
            loop counter changes,

          hn ("GET_CHANGES", callback) => 
            send (callback, ("CHANGES_CALLBACK", changes));
            loop counter [],

          hn _ => loop counter changes
      ]

      in loop counter changes 
    end
  in main_loop start []
  end

  val epoch_counter_hooks = {
    sethook = (fn x => ("INCREASE_EPOCH")),
    gethook = (fn callback => ("GET_STATE", callback)),
    snapshot_condition_hook = (fn (log_summary, callback) => ("SNAP_COND", (log_summary, callback))),
    get_snapshot_hook = (fn callback => ("GET_SNAPSHOT", callback)),
    get_changes_hook = (fn callback => ("GET_CHANGES", callback))
  }
  (* EXPORT END *)

  fun test_epoch () = let 
    val pid = self ()
    val ecounter = spawn (fn () => epoch_counter {x = 1, y = 0})
  in 
    print "Starting test";
    sleep 800;
    print "Done Sleeping";
    send (ecounter, ("GET_STATE", pid));
    print (receive [hn x => x]);
    send (ecounter, "INCREASE_EPOCH");
    sleep 1500;
    send (ecounter, ("GET_STATE", pid));
    print (receive [hn x => x])
  end

in test_epoch ()
end
