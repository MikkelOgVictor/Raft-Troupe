(* EXPORT START *)

fun ping_test () = let 
  val pid = self ()
  val (dialer, cluster) = raft 5 (ping_server ()) (fn log => log.entries_since_snap > 10) pid true 
in 
  print "Sending";
  send (dialer, (RAFT_UPDATE, (dialer, "dialer")));
  send (dialer, (RAFT_UPDATE, ("ping", 3)));
  print (receive [hn x => x]);
  send (dialer, (RAFT_UPDATE,("test", 3)));
  send (dialer, (RAFT_UPDATE,("ping", 7)));
  print (receive [hn x => x])
end

(* fun ping_test2 () = let 
  val pid = self ()
  val raft = raft 5 (ping_server ()) (fn log => log.entries_since_snap > 10) pid false 
  fun loop x = let 
    val _ = sleep 500
    val _ = printString "ping"; send (raft, (RAFT_UPDATE, (pid, ("ping", x))))
    val _ = print (receive [hn x => x])
  in loop new_x end
in loop 1 end *)

fun ping_pong_cluster_test () = 
    let val pid = self ()
        val ping_cluster = raft_spawn 5 (ping_server ()) (fn log => log.entries_since_snap > 10) false 
        val pong_cluster = raft_spawn 5 (pong_server ()) (fn log => log.entries_since_snap > 10) false
        
        val ping_test = raft_dial ping_cluster pid
        val pong_test = raft_dial pong_cluster pid
        val (ping, pong) = raft_dial_clusters ping_cluster pong_cluster

        fun read_pingpong () =
          receive [
            hn x => print x; read_pingpong ()
          ]
    in 
        send_delay(ping, (RAFT_UPDATE, (ping, "dialer"))) 5000;
        send(ping, (RAFT_UPDATE, (ping_test, "dialer")));
        send(pong, (RAFT_UPDATE, (pong, "dialer")));
        send(pong, (RAFT_UPDATE, (pong_test, "dialer")));
        printString "adding dialers";
        send(pong, (RAFT_UPDATE, ("pong", 0)));
        read_pingpong ()
end
(* EXPORT END*)
