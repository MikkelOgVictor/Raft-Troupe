(* EXPORT START *)

fun ping_test () = let 
  val pid = self ()
  val (dialer, cluster) = raft 5 (ping_server ()) (fn log => log.entries_since_snap > 10) pid true 
in 
  print "Sending";
  send (dialer, (RAFT_UPDATE, (dialer, "ping", 3)));
  print (receive [hn x => x]);
  send (dialer, (RAFT_UPDATE,(dialer, "test", 3)));
  send (dialer, (RAFT_UPDATE,(dialer, "ping", 7)));

  send (dialer, (SEND_TO_ALL, DEBUG_PRINTLOG))
end

(* fun ping_test2 () = let 
  val pid = self ()
  val raft = raft 5 (ping_server ()) (fn log => log.entries_since_snap > 10) pid false 
  fun loop x = let 
    val _ = sleep 500
    val _ = printString "ping"; send (raft, (RAFT_UPDATE, (pid, ("ping", x))))
    val _ = print (receive [hn x => x])
  in loop new_x end
in loop 1 end *)

fun ping_pong_cluster_test () = 
    let val pid = self ()
        val ping_cluster = raft_spawn 5 (ping_server ()) (fn log => log.entries_since_snap > 10) false 
        val pong_cluster = raft_spawn 5 (pong_server ping_cluster) (fn log => log.entries_since_snap > 10) false
        val pong_dial = raft_dial pong_cluster

    in
        send_delay(ping_dial, (RAFT_UPDATE, ("ping", 1))) 5000;
        printString "starting ping-pong";
        read_ping_pongs ()
end
(* EXPORT END*)
