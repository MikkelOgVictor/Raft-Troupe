(* EXPORT START *)

fun ping_test () = let 
  val pid = self ()
  val (dialer, cluster) = raft 5 () (fn log => log.entries_since_snap > 10) pid true 
in 
  print "Sending";
  send(dialer, (RAFT_UPDATE, (fn () => ping_server cluster)));
  send_delay (dialer, (RAFT_UPDATE, ({type = CLIENT, id = dialer}, "ping", 3))) 500;
  print (receive [hn x => x])
end

(* fun ping_test2 () = let 
  val pid = self ()
  val raft = raft 5 (ping_server ()) (fn log => log.entries_since_snap > 10) pid false 
  fun loop x = let 
    val _ = sleep 500
    val _ = printString "ping"; send (raft, (RAFT_UPDATE, (pid, ("ping", x))))
    val _ = print (receive [hn x => x])
  in loop new_x end
in loop 1 end *)


fun ping_pong_cluster_test () = 
    let val pid = self ()
        val ping_cluster = raft_spawn 5 () (fn log => log.entries_since_snap > 10) true 
        val pong_cluster = raft_spawn 5 () (fn log => log.entries_since_snap > 10) true
        val dialer = raft_dial ping_cluster pid
        val dialer2 = raft_dial pong_cluster pid 
    in 
        send(dialer, (RAFT_UPDATE, (fn () => ping_server { type = CLUSTER, id = ping_cluster})));
        send(dialer2, (RAFT_UPDATE, (fn () => ping_server { type = CLUSTER, id = pong_cluster})));
        send_delay(dialer, (RAFT_UPDATE, ({ type = CLUSTER, id = pong_cluster}, 0))) 5000
end
(* EXPORT END*)
