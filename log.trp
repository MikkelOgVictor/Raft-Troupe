    fun set_snapshot snapshot index term = {
        snapshot = snapshot,
        lastIncludedIndex = index,
        lastIncludedTerm = term
    }

    val empty_snapshot = set_snapshot () 0 0

    val empty_log = {
        log = [],
        snapshot = empty_snapshot,
        lastApplied = 0,
        commitIndex = 0
    }

    fun empty_log_with_snap snapshot = {
        log = [],
        snapshot = snapshot,
        lastApplied = 0,
        commitIndex = 0
    }

    fun append_message log message term = 
        let val new_entry = {
            term = term,
            command = message
        }
        in {
            log with 
            log = new_entry :: log.log
        } 
    end

    fun add_entries_to_log log entries term =
        case entries of
        [] => log
        | h :: t => add_entries_to_log (append_message log h.command term) t h.term

    fun update_applied log = {
        log with
        lastApplied = log.lastApplied + 1
    }
    
    fun update_commit log new_index = {
       log with 
       commitIndex = (max new_index log.commitIndex)
    }

    fun rollback_log log =
        let val (_ :: prev_log) = log.log
    in {
        log with 
        log = prev_log
    }
    end

    fun get_log_index log = (length log.log) + log.snapshot.lastIncludedIndex

    fun rollback_log_to log n = 
        if n < (get_log_index log) then
            let val log = rollback_log log
            in (rollback_log_to log n)
        end
        else log

    fun get_latest_entry_term log =
        case log.log of
        [] => log.snapshot.lastIncludedTerm
        | h :: _ => h.term

    fun get_latest_log_term log = get_latest_entry_term log

    fun get_latest_log_command log = 
        case log.log of
        [] => 0 (* Should not be reachable*)
        | h :: _ => h.command

    fun get_nth_command log index = nth (reverse log.log) (index - log.snapshot.lastIncludedIndex) 

    fun get_commands_after_nth log n =
        let val log_slice = slice (n - log.snapshot.lastIncludedIndex) (length log.log) (reverse log.log)
        in log_slice
        end

    fun uncommitted_entries log = slice (get_log_index log) log.commitIndex log.log

    fun apply_log log f = if log.lastApplied < log.commitIndex 
        then 
            let val _ = f ((get_nth_command log (log.lastApplied + 1)).command) 
            val log = update_applied log
            in apply_log log f end
        else log
    
    fun take_snapshot state_machine index term = 
        let val pid = self()
            val _ = send (state_machine.pid, (state_machine.snapshot_gethook pid))
            val state = receive[hn ("SNAPSHOT", x) => x]
        in set_snapshot state index term
    end

    fun get_snapshot state_machine log = 
        let val lastCommitted = get_nth_command log log.commitIndex
        in take_snapshot state_machine log.commitIndex lastCommitted.term
    end


    fun apply_snapshot state_machine snapshot log =
        let val _ = send(state_machine.pid, snapshot.snapshot)
            val uncommitted_entries = uncommitted_entries log
            val newCommitIndex = 
                if log.commitIndex < snapshot.lastIncludedIndex then snapshot.lastIncludedIndex
                else log.commitIndex
            val newLastApplied =
                if log.lastApplied < snapshot.lastIncludedIndex then snapshot.lastIncludedIndex
                else log.lastApplied
        in { log with 
                log = uncommitted_entries,
                commitIndex = newCommitIndex,
                lastApplied = newLastApplied,
                snapshot = snapshot }
    end

    fun generate_summary log = 
        {log_size = (length log.log), entries_since_snap = 51}

    fun get_snapshot_cond state_machine log = 
        let val p_id = self ()
            val summary = generate_summary log
        in 
            print summary;
            send(state_machine.pid, (state_machine.snapshot_condition_hook (summary, p_id)))
    end
